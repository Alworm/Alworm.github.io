<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo+个人服务器+Github搭建个人博客</title>
    <url>/2020/03/27/Linux/Hexo%20+%20%E4%B8%AA%E4%BA%BA%E6%9C%8D%E5%8A%A1%E5%99%A8%20+%20Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<h1 id="Hexo-个人服务器-Github搭建个人博客"><a href="#Hexo-个人服务器-Github搭建个人博客" class="headerlink" title="Hexo + 个人服务器 + Github搭建个人博客"></a>Hexo + 个人服务器 + Github搭建个人博客</h1><h2 id="一-环境准备"><a href="#一-环境准备" class="headerlink" title="(一)环境准备"></a>(一)环境准备</h2><ol>
<li>个人PC</li>
<li>个人服务器(没有也可以，直接使用Github托管)</li>
</ol>
<p>说明:</p>
<p>​        本人电脑是双系统，此教程是在Linux下操作的，但是Win也是差不多的。</p>
<h2 id="二-PC搭建Hexo"><a href="#二-PC搭建Hexo" class="headerlink" title="(二) PC搭建Hexo"></a>(二) PC搭建Hexo</h2><h3 id="1-安装Git"><a href="#1-安装Git" class="headerlink" title="1) 安装Git"></a>1) 安装Git</h3><p>Linux:</p>
<p>命令行输入以下命令安装</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>

<p>安装完成之后可以查看版本，确认安装成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git --version</span><br></pre></td></tr></table></figure>

<h3 id="2-安装nodejs"><a href="#2-安装nodejs" class="headerlink" title="2) 安装nodejs"></a>2) 安装nodejs</h3><p> Hexo是基于nodeJS编写的，所以需要安装一下nodeJs和里面的npm工具。</p>
<p>Linux :</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt-get install npm</span><br></pre></td></tr></table></figure>

<p>安装完成之后可以查看版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<h3 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3) 安装hexo"></a>3) 安装hexo</h3><p>安装命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>



<p>查看是否安装成功</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo -v</span><br></pre></td></tr></table></figure>



<p>初始化</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo init Alworm</span><br></pre></td></tr></table></figure>

<p><code>Alworm</code>写的是你的博客的名字，名字自己随便取</p>
<p>进入此目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd Alworm</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure>



<p>生成博客</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p>在浏览器输入<code>localhost:4000</code>就可以看到你自己博客的样子了。</p>
<p>默认的博客的样子有点丑，可以自己更改，我会在我的另一篇文章中提到。</p>
<h2 id="三-Github托管"><a href="#三-Github托管" class="headerlink" title="(三)Github托管"></a>(三)Github托管</h2><p>通过之前的操作，我们已经生成了自己的博客，但是此时我们的博客还只是在本地电脑上，现在只有你自己才能看看到，显然我们的目标远远不只于此。</p>
<h3 id="1-创建属于自己的GitHub账号"><a href="#1-创建属于自己的GitHub账号" class="headerlink" title="1) 创建属于自己的GitHub账号"></a>1) 创建属于自己的GitHub账号</h3><p>![Screenshot from 2020-03-27 08-58-09](/home/alworm/Pictures/Screenshot from 2020-03-27 08-58-09.png)</p>
<p>创建一个和你用户名相同的仓库,后面加上<code>github.io</code>只有这样，将来要部署到GitHub page的时候，才会被识别，例如:<code>alworm.github.io</code>。</p>
<h3 id="2-向Github上传"><a href="#2-向Github上传" class="headerlink" title="2) 向Github上传"></a>2) 向Github上传</h3><p>可以使用ssh的方式，大概过程是利用公钥和秘钥, 这样每次都不用输入密码了</p>
<p>也可以用https的方式，不过这样每次上传的时候都要输入密码</p>
<p>操作:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global user.name "你的Github用户名"</span><br><span class="line">git config --global user.email "你的Github使用的邮箱"</span><br></pre></td></tr></table></figure>

<p>检查：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C "你的邮箱"</span><br></pre></td></tr></table></figure>

<p>之后会在你的电脑上生成一个隐藏目录.ssh, 其中保存的就是你的公钥和秘钥。利用<code>ls -a</code>可以查看隐藏文件</p>
<p>而后在GitHub的setting中，找到SSH keys的设置选项，点击<code>New SSH key</code><br>把你的<code>id_rsa.pub</code>里面的信息复制进去。</p>
<p>![Screenshot from 2020-03-27 09-14-452](/home/alworm/Pictures/Screenshot from 2020-03-27 09-14-452.png)</p>
<p>![Screenshot from 2020-03-27 09-14-45](/home/alworm/Pictures/Screenshot from 2020-03-27 09-14-45.png)</p>
<p>在gitbash中，查看是否成功</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>



<h3 id="3-将你的博客部署到Github"><a href="#3-将你的博客部署到Github" class="headerlink" title="3) 将你的博客部署到Github"></a>3) 将你的博客部署到Github</h3><p>找到你之前在PC上建立的博客目录</p>
<p>进入里面有一个<code>_config.yml</code>文件，打开他</p>
<p>在文件的最后添加如下内容</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/YourGithubName/YourGithubName.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<p>上面的repo 写的地址是 https的上传方式，需要输入用户名和密码（Github的）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git@github.com:YourGithubName/YourGithubName.github.io.git,master</span><br></pre></td></tr></table></figure>

<p>有了<code>,master</code>就不用写下面那句 <code>branch: master</code>了 </p>
<p>保存退出</p>
<p>执行下面的命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

 <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<p><code>hexo clean</code>                       清除了你之前生成的东西，也可以不加。<br><code>hexo generate</code>                 顾名思义，生成静态文章，可以用 <code>hexo g</code>缩写<br><code>hexo deploy</code>                     部署文章，可以用<code>hexo d</code>缩写</p>
<p>此时在<code>http://yourname.github.io</code>就可以看到你自己的博客了</p>
<h2 id="四-个人服务器的配置以及搭建"><a href="#四-个人服务器的配置以及搭建" class="headerlink" title="(四)个人服务器的配置以及搭建"></a>(四)个人服务器的配置以及搭建</h2><p>随着博客内容越来越多，你会发现，托管到github上速度真的是有点慢（访问速度），此时你可能就需要看到这一部分了。</p>
<p>由于coding 个人版本已经下架Coding Pages 功能，所以要想提高国内访问你博客的速度，最好的方法就是搭建自己的个人服务器了。</p>
<h3 id="1-基础准备"><a href="#1-基础准备" class="headerlink" title="1) 基础准备"></a>1) 基础准备</h3><p>云服务器 （我个人购买的是腾讯云）</p>
<h3 id="2-环境准备"><a href="#2-环境准备" class="headerlink" title="2) 环境准备"></a>2) 环境准备</h3><p>安装nginx</p>
<p>​    推荐使用 <a href="https://lnmp.org/install.html" target="_blank" rel="noopener">LNMP一键安装包</a></p>
<p>安装node.js</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -sL https://deb.nodesource.com/setup_4.x | sudo -E bash -</span><br><span class="line">apt-get install -y nodejs</span><br></pre></td></tr></table></figure>



<p>安装Git</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install git</span><br></pre></td></tr></table></figure>



<p>为了确保安全性, 使用一个专门的git用户来进行git操作(不这样也是可以的)</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo adduser git</span><br></pre></td></tr></table></figure>



<p>添加证书登录</p>
<p>在上面的操作中，我们已经完成了,公钥和秘钥，把自己的公钥添加到，服务器的 <code>/home/git/.ssh/authorized_keys</code> 文件中</p>
<p>创建Git仓库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir /var/repo</span><br><span class="line">cd /var/repo</span><br><span class="line">sudo git init --bare blog.git</span><br></pre></td></tr></table></figure>



<p>配置git hooks</p>
<p>在 blog.git/hooks 目录下新建一个 post-receive 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /var/repo/blog.git/hooks</span><br></pre></td></tr></table></figure>

<p>创建一个文件下如以下内容:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git --work-tree=/var/www/html --git-dir=/var/repo/blog.git checkout -f</span><br></pre></td></tr></table></figure>

<p>注意此处的目录是采用刚刚统一安装软件会生成的目录，和一个自定义的目录，所以注意你自己的目录</p>
<p>给这个文件添加可执行权限</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x 你创建的文件的名字</span><br></pre></td></tr></table></figure>



<p>改变 blog.git 目录的拥有者为 git 用户</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo chown -R git:git blog.git</span><br></pre></td></tr></table></figure>

<h3 id="3-配置本地Hexo"><a href="#3-配置本地Hexo" class="headerlink" title="3) 配置本地Hexo"></a>3) 配置本地Hexo</h3><p>修改你的PC下<code>_config.yml</code> 文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">type: git</span><br><span class="line">repo: git@129.204.29.53:/var/repo/blog.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure>

<p>我这里没有再使用github ，你也可以使用两个仓库。</p>
<h3 id="4）部署到个人服务器"><a href="#4）部署到个人服务器" class="headerlink" title="4）部署到个人服务器"></a>4）部署到个人服务器</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Hexo</tag>
        <tag>服务器</tag>
        <tag>个人博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Python爬虫入门案例</title>
    <url>/2020/03/25/Spider/SpiderTest01/</url>
    <content><![CDATA[<h2 id="（一）环境准备"><a href="#（一）环境准备" class="headerlink" title="（一）环境准备"></a>（一）环境准备</h2><p><strong>1.python3</strong></p>
<p><strong>2.requests库</strong>  </p>
<h2 id="（二）测试案例"><a href="#（二）测试案例" class="headerlink" title="（二）测试案例"></a>（二）测试案例</h2><p>爬取百度上的网页信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> req</span><br><span class="line">r = req.get(<span class="string">"http://www.baidu.com"</span>)</span><br><span class="line">r.encoding = <span class="string">"utf-8"</span></span><br><span class="line">r.text</span><br></pre></td></tr></table></figure>

<h2 id="三-运行结果"><a href="#三-运行结果" class="headerlink" title="(三)运行结果"></a>(三)运行结果</h2><h2 id=""><a href="#" class="headerlink" title=""></a><img src="https://img-blog.csdnimg.cn/20200111195049564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYXh1MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></h2>]]></content>
      <categories>
        <category>Python</category>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>Pthon</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>My awesome title</title>
    <url>/2020/03/25/AI/InstallAnaconda3/</url>
    <content><![CDATA[<h2 id="（一）基础环境"><a href="#（一）基础环境" class="headerlink" title="（一）基础环境"></a>（一）基础环境</h2><p>Anaconda3 和 Centos7<br>没有安装Anaconda3的 转<a href="https://blog.csdn.net/shaxu123/article/details/103967016" target="_blank" rel="noopener">这里</a></p>
<h2 id="（二）Anaconda3-安装Scrapy"><a href="#（二）Anaconda3-安装Scrapy" class="headerlink" title="（二）Anaconda3 安装Scrapy"></a>（二）Anaconda3 安装Scrapy</h2><p>使用如下命令安装scrapy</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install scrapy</span><br></pre></td></tr></table></figure>
<p>安装过程<br>一路yes<br><img src="https://img-blog.csdnimg.cn/20200114081554325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYXh1MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="（三）测试"><a href="#（三）测试" class="headerlink" title="（三）测试"></a>（三）测试</h2><p><img src="https://img-blog.csdnimg.cn/20200114081838823.png" alt="在这里插入图片描述"><br>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">import scrapy</span><br></pre></td></tr></table></figure>

<p>一切正常，安装成功</p>
]]></content>
      <categories>
        <category>AI</category>
        <category>Anaconda3</category>
      </categories>
      <tags>
        <tag>Anaconda3</tag>
        <tag>Centos</tag>
      </tags>
  </entry>
  <entry>
    <title>Centos7 Scrapy安装</title>
    <url>/2020/03/25/Spider/InstallScrapy-md/</url>
    <content><![CDATA[<h2 id="（一）基础环境"><a href="#（一）基础环境" class="headerlink" title="（一）基础环境"></a>（一）基础环境</h2><p>Anaconda3 和 Centos7<br>没有安装Anaconda3的 转<a href="https://blog.csdn.net/shaxu123/article/details/103967016" target="_blank" rel="noopener">这里</a></p>
<h2 id="（二）Anaconda3-安装Scrapy"><a href="#（二）Anaconda3-安装Scrapy" class="headerlink" title="（二）Anaconda3 安装Scrapy"></a>（二）Anaconda3 安装Scrapy</h2><p>使用如下命令安装scrapy</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">conda install scrapy</span><br></pre></td></tr></table></figure>
<p>安装过程<br>一路yes<br><img src="https://img-blog.csdnimg.cn/20200114081554325.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYXh1MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h2 id="（三）测试"><a href="#（三）测试" class="headerlink" title="（三）测试"></a>（三）测试</h2><p><img src="https://img-blog.csdnimg.cn/20200114081838823.png" alt="在这里插入图片描述"><br>输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python</span><br><span class="line">import scrapy</span><br></pre></td></tr></table></figure>

<p>一切正常，安装成功</p>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Scrapy</tag>
        <tag>Centos7</tag>
      </tags>
  </entry>
  <entry>
    <title>TabError inconsistent use of tabs and spaces in indentation 错误解决</title>
    <url>/2020/03/25/Others/TabError/</url>
    <content><![CDATA[<h2 id="（一）错误原因"><a href="#（一）错误原因" class="headerlink" title="（一）错误原因"></a>（一）错误原因</h2><pre><code>tab和空格混合使用</code></pre><h2 id="（二）更正方法"><a href="#（二）更正方法" class="headerlink" title="（二）更正方法"></a>（二）更正方法</h2><pre><code>把tab全部改写为空格。
分析:
    我是在Centos7 中用scrapy框架写代码的时候，发生的错误，scrapy自带的代码是用的空格空开的，我自己加的
    代码是用的tab，导致出现问题。 
    python就是用空格区分（不使用{}）所以比较严格吧</code></pre>]]></content>
      <categories>
        <category>错误</category>
      </categories>
      <tags>
        <tag>TabError</tag>
      </tags>
  </entry>
  <entry>
    <title>Java重温</title>
    <url>/2020/03/25/Java/Java%E9%87%8D%E6%B8%A9/</url>
    <content><![CDATA[<h2 id="（一）泛型-上"><a href="#（一）泛型-上" class="headerlink" title="（一）泛型(上)"></a>（一）泛型(上)</h2><h5 id="1）No泛型"><a href="#1）No泛型" class="headerlink" title="1）No泛型"></a>1）No泛型</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NeedGeneric1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(a + <span class="string">"+"</span> + b + <span class="string">"="</span> + (a + b));</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">float</span> <span class="title">add</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(a + <span class="string">"+"</span> + b + <span class="string">"="</span> + (a + b));</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">double</span> <span class="title">add</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line">        System.out.println(a + <span class="string">"+"</span> + b + <span class="string">"="</span> + (a + b));</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T extends Number&gt; <span class="function"><span class="keyword">double</span> <span class="title">add</span><span class="params">(T a, T b)</span> </span>&#123;</span><br><span class="line">        System.out.println(a + <span class="string">"+"</span> + b + <span class="string">"="</span> + (a.doubleValue() + b.doubleValue()));</span><br><span class="line">        <span class="keyword">return</span> a.doubleValue() + b.doubleValue();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        NeedGeneric1.add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        NeedGeneric1.add(<span class="number">1f</span>, <span class="number">2f</span>);</span><br><span class="line">        NeedGeneric1.add(<span class="number">1</span>d, <span class="number">2</span>d);</span><br><span class="line">        NeedGeneric1.add(Integer.valueOf(<span class="number">1</span>), Integer.valueOf(<span class="number">2</span>));</span><br><span class="line">        NeedGeneric1.add(Float.valueOf(<span class="number">1</span>), Float.valueOf(<span class="number">2</span>));</span><br><span class="line">        NeedGeneric1.add(Double.valueOf(<span class="number">1</span>), Double.valueOf(<span class="number">2</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>我们不难发现，同一个add方法，我们需要写要几个不同参数形式的方法去适配所有的情况，这无疑是十分不方便的。</p>
<h5 id="2-Have泛型"><a href="#2-Have泛型" class="headerlink" title="2)Have泛型"></a>2)Have泛型</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jay.java.泛型.DefineGeneric;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClass</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getData</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setData</span><span class="params">(T data)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GenericClass&lt;String&gt; genericClass=<span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        genericClass.setData(<span class="string">"Generic Class"</span>);</span><br><span class="line">        System.out.println(genericClass.getData());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h5 id="3）泛型的意义"><a href="#3）泛型的意义" class="headerlink" title="3）泛型的意义"></a>3）泛型的意义</h5><ol>
<li>适用于多种数据类型执行相同的代码（代码复用）</li>
<li>泛型中的类型在使用时指定，不需要强制类型转换（类型安全，编译器会检查类型）</li>
</ol>
<h5 id="4-视频部分代码"><a href="#4-视频部分代码" class="headerlink" title="4)视频部分代码"></a>4)视频部分代码</h5><p>泛型Car</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lys.genericityup.Bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span> &lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T car;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(T car)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.car = car;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.car;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lys.genericityup.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lys.genericityup.Bean.Car;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testCar</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Car&lt;String&gt; car = <span class="keyword">new</span> Car&lt;&gt;(<span class="string">"Bus"</span>);</span><br><span class="line">        System.out.println(car.getObject());</span><br><span class="line"></span><br><span class="line">        Car&lt;Date&gt; car2 = <span class="keyword">new</span> Car&lt;Date&gt;(<span class="keyword">new</span> Date());</span><br><span class="line">        System.out.println(car2.getObject());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="（二）泛型-下"><a href="#（二）泛型-下" class="headerlink" title="（二）泛型(下)"></a>（二）泛型(下)</h2><h5 id="1-泛型的继承规则"><a href="#1-泛型的继承规则" class="headerlink" title="1) 泛型的继承规则"></a>1) 泛型的继承规则</h5><ol>
<li>对于泛型参数是继承关系的泛型类之间是没有继承关系的</li>
<li>泛型类可以继承其它泛型类，例如: <code>public class Car&lt;T&gt; extends Vehicle&lt;T&gt;</code></li>
<li>泛型类的继承关系在使用中同样会受到泛型类型的影响</li>
</ol>
<h5 id="2-视频中部分代码"><a href="#2-视频中部分代码" class="headerlink" title="2)视频中部分代码"></a>2)视频中部分代码</h5><p>Car类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lys.genericitydown.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Car</span>&lt;<span class="title">T</span>&gt; <span class="keyword">extends</span> <span class="title">Vehicle</span>&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Car</span><span class="params">(T name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Vehicle类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lys.genericitydown.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vehicle</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> T name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Vehicle</span><span class="params">(T name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Vehicle&#123;"</span> +</span><br><span class="line">                <span class="string">"name="</span> + name +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Test类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> lys.genericitydown.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lys.genericitydown.bean.Car;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.xml.crypto.Data;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMain</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> Car&lt;String&gt;(<span class="string">"BMW"</span>).toString());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-泛型的通配符问题"><a href="#3-泛型的通配符问题" class="headerlink" title="3) 泛型的通配符问题"></a>3) 泛型的通配符问题</h5><ol>
<li>&lt;? extends Parent&gt;指定了泛型类型的上级</li>
<li>&lt;? super Child&gt;指定了泛型类型的下级</li>
<li>&lt;?&gt;指定了没有限制的泛型类型</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/2020032117530734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYXh1MTIz,size_16,color_FFFFFF,t_70" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-eoSS6jbf-1584538429218)(C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\1584536788750.png)\]"></p>
<h5 id="4）参考代码"><a href="#4）参考代码" class="headerlink" title="4）参考代码"></a>4）参考代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericByWildcard</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(GenericClass&lt;Fruit&gt; fruitGenericClass)</span> </span>&#123;</span><br><span class="line">        System.out.println(fruitGenericClass.getData().getColor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GenericClass&lt;Fruit&gt; fruitGenericClass = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        print(fruitGenericClass);</span><br><span class="line">        GenericClass&lt;Orange&gt; orangeGenericClass = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        <span class="comment">//类型不匹配,可以使用&lt;? extends Parent&gt; 来解决</span></span><br><span class="line"><span class="comment">//        print(orangeGenericClass);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;? extends Parent&gt; 指定了泛型类型的上届</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printExtends</span><span class="params">(GenericClass&lt;? extends Fruit&gt; genericClass)</span> </span>&#123;</span><br><span class="line">        System.out.println(genericClass.getData().getColor());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useExtend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GenericClass&lt;Fruit&gt; fruitGenericClass = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        printExtends(fruitGenericClass);</span><br><span class="line">        GenericClass&lt;Orange&gt; orangeGenericClass = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        printExtends(orangeGenericClass);</span><br><span class="line"></span><br><span class="line">        GenericClass&lt;Food&gt; foodGenericClass = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        <span class="comment">//Food是Fruit的父类，超过了泛型上届范围，类型不匹配</span></span><br><span class="line"><span class="comment">//        printExtends(foodGenericClass);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//表示GenericClass的类型参数的上届是Fruit</span></span><br><span class="line">        GenericClass&lt;? extends Fruit&gt; extendFruitGenericClass = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        Apple apple = <span class="keyword">new</span> Apple();</span><br><span class="line">        Fruit fruit = <span class="keyword">new</span> Fruit();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 道理很简单，？ extends X  表示类型的上界，类型参数是X的子类，那么可以肯定的说，</span></span><br><span class="line"><span class="comment">         * get方法返回的一定是个X（不管是X或者X的子类）编译器是可以确定知道的。</span></span><br><span class="line"><span class="comment">         * 但是set方法只知道传入的是个X，至于具体是X的那个子类，不知道。</span></span><br><span class="line"><span class="comment">         * 总结：主要用于安全地访问数据，可以访问X及其子类型，并且不能写入非null的数据。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        extendFruitGenericClass.setData(apple);</span></span><br><span class="line"><span class="comment">//        extendFruitGenericClass.setData(fruit);</span></span><br><span class="line"></span><br><span class="line">        fruit = extendFruitGenericClass.getData();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;? super Child&gt; 指定了泛型类型的下届</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printSuper</span><span class="params">(GenericClass&lt;? <span class="keyword">super</span> Apple&gt; genericClass)</span> </span>&#123;</span><br><span class="line">        System.out.println(genericClass.getData());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useSuper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GenericClass&lt;Food&gt; foodGenericClass = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        printSuper(foodGenericClass);</span><br><span class="line"></span><br><span class="line">        GenericClass&lt;Fruit&gt; fruitGenericClass = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        printSuper(fruitGenericClass);</span><br><span class="line"></span><br><span class="line">        GenericClass&lt;Apple&gt; appleGenericClass = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        printSuper(appleGenericClass);</span><br><span class="line"></span><br><span class="line">        GenericClass&lt;HongFuShiApple&gt; hongFuShiAppleGenericClass = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        <span class="comment">// HongFuShiApple 是Apple的子类，达不到泛型下届，类型不匹配</span></span><br><span class="line"><span class="comment">//        printSuper(hongFuShiAppleGenericClass);</span></span><br><span class="line"></span><br><span class="line">        GenericClass&lt;Orange&gt; orangeGenericClass = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        <span class="comment">// Orange和Apple是兄弟关系，没有继承关系，类型不匹配</span></span><br><span class="line"><span class="comment">//        printSuper(orangeGenericClass);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//表示GenericClass的类型参数的下界是Apple</span></span><br><span class="line">        GenericClass&lt;? <span class="keyword">super</span> Apple&gt; supperAppleGenericClass = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        supperAppleGenericClass.setData(<span class="keyword">new</span> Apple());</span><br><span class="line">        supperAppleGenericClass.setData(<span class="keyword">new</span> HongFuShiApple());</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * ？ super  X  表示类型的下界，类型参数是X的超类（包括X本身），</span></span><br><span class="line"><span class="comment">         * 那么可以肯定的说，get方法返回的一定是个X的超类，那么到底是哪个超类？不知道，</span></span><br><span class="line"><span class="comment">         * 但是可以肯定的说，Object一定是它的超类，所以get方法返回Object。</span></span><br><span class="line"><span class="comment">         * 编译器是可以确定知道的。对于set方法来说，编译器不知道它需要的确切类型，但是X和X的子类可以安全的转型为X。</span></span><br><span class="line"><span class="comment">         * 总结：主要用于安全地写入数据，可以写入X及其子类型。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">//        supperAppleGenericClass.setData(new Fruit());</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//get方法只会返回一个Object类型的值。</span></span><br><span class="line">        Object data = supperAppleGenericClass.getData();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * &lt;?&gt; 指定了没有限定的通配符</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printNonLimit</span><span class="params">(GenericClass&lt;?&gt; genericClass)</span> </span>&#123;</span><br><span class="line">        System.out.println(genericClass.getData());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useNonLimit</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        GenericClass&lt;Food&gt; foodGenericClass = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        printNonLimit(foodGenericClass);</span><br><span class="line">        GenericClass&lt;Fruit&gt; fruitGenericClass = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        printNonLimit(fruitGenericClass);</span><br><span class="line">        GenericClass&lt;Apple&gt; appleGenericClass = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        printNonLimit(appleGenericClass);</span><br><span class="line"></span><br><span class="line">        GenericClass&lt;?&gt; genericClass = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        <span class="comment">//setData 方法不能被调用， 甚至不能用 Object 调用；</span></span><br><span class="line"><span class="comment">//        genericClass.setData(foodGenericClass);</span></span><br><span class="line"><span class="comment">//        genericClass.setData(new Object());</span></span><br><span class="line">        <span class="comment">//返回值只能赋给 Object</span></span><br><span class="line">        Object object = genericClass.getData();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-泛型中的约束和局限性"><a href="#5-泛型中的约束和局限性" class="headerlink" title="5)泛型中的约束和局限性"></a>5)泛型中的约束和局限性</h5><ol>
<li>不能实例化泛型类</li>
<li>静态变量或方法不能引用泛型类型变量，但是静态泛型方法是可以的</li>
<li>基本类型无法作为泛型类型</li>
<li>无法使用 <code>instanceof</code> 关键字或==判断泛型类的类型</li>
<li>泛型类的原生类型与所传递的泛型无关，无论传递什么类型，原生类是一样的</li>
<li>泛型数组可以声明但无法实例化</li>
<li>泛型类不能继承Exception或者<code>Throwable</code></li>
<li>不能捕获泛型类型限定的异常但可以将泛型限定的异常抛出</li>
</ol>
<h3 id="三-Collection"><a href="#三-Collection" class="headerlink" title="(三) Collection"></a>(三) Collection</h3><h5 id="1）List"><a href="#1）List" class="headerlink" title="1）List"></a>1）List</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">       List list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">       list.add(<span class="number">10</span>);</span><br><span class="line">       list.add(<span class="string">"hello"</span>);</span><br><span class="line">       list.add(<span class="keyword">true</span>);</span><br><span class="line">       list.add(<span class="number">99.9f</span>);</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       第一种遍历方法</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">           System.out.println(o);</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">/*</span></span><br><span class="line"><span class="comment">       第二中遍历方法</span></span><br><span class="line"><span class="comment">       */</span></span><br><span class="line">       Iterator iterator = list.iterator();</span><br><span class="line">       <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">           Object next = iterator.next();</span><br><span class="line">           System.out.println(next);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>



<h5 id="2）HashSet"><a href="#2）HashSet" class="headerlink" title="2）HashSet"></a>2）<code>HashSet</code></h5><p><code>HashSet</code>中没有重复的元素，可以用于去重</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * HashSet中没有重复的元素</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Set set = <span class="keyword">new</span> HashSet();</span><br><span class="line">        set.add(<span class="number">1</span>);</span><br><span class="line">        set.add(<span class="string">"Hello"</span>);</span><br><span class="line">        set.add(<span class="number">1246.4f</span>);</span><br><span class="line">        set.add(<span class="string">"Hello"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o : set) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="3-Queue"><a href="#3-Queue" class="headerlink" title="3) Queue"></a>3) Queue</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 不要使用add方法添加</span></span><br><span class="line"><span class="comment">         * 相同：两者都是往队列尾部插入元素，</span></span><br><span class="line"><span class="comment">         * 不同的：当超出队列界限的时候，add（）方法是抛出异常让你处理，而offer（）方法是直接返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Queue queue = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        queue.offer(<span class="number">1</span>);</span><br><span class="line">        queue.offer(<span class="string">"Hello"</span>);</span><br><span class="line">        queue.offer(<span class="number">999.9</span>d);</span><br><span class="line">        <span class="keyword">for</span> (Object o : queue) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * peek()方法会返回队列的头部</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"QueueHead:"</span>+queue.peek());</span><br><span class="line">        System.out.println(<span class="string">"QueueSize:"</span>+queue.size());</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * poll()会把队列的头部取出</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"QueueHead:"</span>+queue.poll());</span><br><span class="line">        System.out.println(<span class="string">"QueueSize:"</span>+queue.size());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h5 id="4-HashMap"><a href="#4-HashMap" class="headerlink" title="4)HashMap"></a>4)<code>HashMap</code></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">       	添加键值对到map中去</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;String,String&gt;();</span><br><span class="line">        map.put(<span class="string">"1a"</span>,<span class="string">"Hello"</span>);</span><br><span class="line">        map.put(<span class="string">"2b"</span>,<span class="string">"World"</span>);</span><br><span class="line">        map.put(<span class="string">"3c"</span>,<span class="string">"Java"</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        遍历方法一：</span></span><br><span class="line"><span class="comment">        	只获取出map中的values</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="string">"打印Values"</span>);</span><br><span class="line">        <span class="keyword">for</span> (String value : map.values())&#123;</span><br><span class="line">            System.out.println(value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"============================"</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        遍历方法二：</span></span><br><span class="line"><span class="comment">        	获取出map中的key和value</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="string">"打印Key:Value"</span>);</span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : set) &#123;</span><br><span class="line">            String value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">":"</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"============================"</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        遍历方法三：</span></span><br><span class="line"><span class="comment">        	最常用的方法</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(<span class="string">"最常用的方式打印"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            String value = entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">":"</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h5 id="5）Array"><a href="#5）Array" class="headerlink" title="5）Array"></a>5）Array</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@org</span>.junit.Test</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 一旦转换是不能修改的</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        List list = Arrays.asList(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object o : list) &#123;</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"List转换为数组"</span>);</span><br><span class="line">        Object[] objects = list.toArray();</span><br><span class="line">        System.out.println(Arrays.toString(objects));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 把List转换为不能更改的List</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Object&gt; list2 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list2.add(<span class="number">1</span>);</span><br><span class="line">        list2.add(<span class="number">2</span>);</span><br><span class="line">        List&lt;Object&gt; unlist = Collections.unmodifiableList(list2);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * unlist不能更改</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>泛型</tag>
        <tag>Java常用接口</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机Centos7磁盘扩充</title>
    <url>/2020/03/25/Linux/Centos7%E7%A3%81%E7%9B%98%E6%89%A9%E5%85%85/</url>
    <content><![CDATA[<h2 id="（一）虚拟机vmware-centos7-扩展磁盘空间"><a href="#（一）虚拟机vmware-centos7-扩展磁盘空间" class="headerlink" title="（一）虚拟机vmware centos7 扩展磁盘空间"></a>（一）虚拟机vmware centos7 扩展磁盘空间</h2><blockquote>
<p><code>[root@aubin ~]# vgdisplay</code><br>  — Volume group —<br>  VG Name               <strong><em><code>centos</code></em></strong><br>  System ID<br>  Format                lvm2<br>  Metadata Areas        2<br>  Metadata Sequence No  4<br>  VG Access             read/write<br>  VG Status             resizable<br>  MAX LV                0<br>  Cur LV                2<br>  Open LV               2<br>  Max PV                0<br>  Cur PV                2<br>  Act PV                2<br>  VG Size               23.99 GiB<br>  PE Size               4.00 MiB<br>  Total PE              6142<br>  Alloc PE / Size       4863 / &lt;19.00 GiB<br>  Free  PE / Size       1279 / &lt;5.00 GiB<br>  VG UUID               jasglx-OPLA-G0g2-qpgP-wmS3-nISE-JylLNv</p>
</blockquote>
<p>注意这个名字</p>
<blockquote>
<p><code>[root@aubin ~]# mkfs.xfs -f /dev/sda3</code><br>meta-data=/dev/sda3              isize=512    agcount=4, agsize=1310720 blks<br>         =                       sectsz=512   attr=2, projid32bit=1<br>         =                       crc=1        finobt=0, sparse=0<br>data     =                       bsize=4096   blocks=5242880, imaxpct=25<br>         =                       sunit=0      swidth=0 blks<br>naming   =version 2              bsize=4096   ascii-ci=0 ftype=1<br>log      =internal log           bsize=4096   blocks=2560, version=2<br>         =                       sectsz=512   sunit=0 blks, lazy-count=1<br>realtime =none                   extsz=4096   blocks=0, rtextents=0</p>
</blockquote>
<blockquote>
<p><code>[root@aubin ~]# pvcreate -f /dev/sda3</code><br>  WARNING: Device for PV dRKew5-i08K-vSGQ-okUo-Qx9M-DY2e-CBGUN6 not found or rejected by a filter.<br>  Couldn’t find device with uuid dRKew5-i08K-vSGQ-okUo-Qx9M-DY2e-CBGUN6.<br>  Wiping xfs signature on /dev/sda3.<br>  Physical volume “/dev/sda3” successfully created.</p>
</blockquote>
<blockquote>
<p><code>[root@aubin ~]# vgextend centos /dev/sda3</code><br>  WARNING: Device for PV dRKew5-i08K-vSGQ-okUo-Qx9M-DY2e-CBGUN6 not found or rejected by a filter.<br>  Couldn’t find device with uuid dRKew5-i08K-vSGQ-okUo-Qx9M-DY2e-CBGUN6.<br>  WARNING: Device for PV dRKew5-i08K-vSGQ-okUo-Qx9M-DY2e-CBGUN6 not found or rejected by a filter.<br>  Volume group “centos” successfully extended</p>
</blockquote>
<blockquote>
<p><code>[root@aubin ~]# lvdisplay</code><br> WARNING: Device for PV dRKew5-i08K-vSGQ-okUo-Qx9M-DY2e-CBGUN6 not found or rejected by a filter.<br> Couldn’t find device with uuid dRKew5-i08K-vSGQ-okUo-Qx9M-DY2e-CBGUN6.<br> — Logical volume —<br><code>LV Path                /dev/centos/swap</code><br> LV Name                swap<br>  VG Name                centos<br>  LV UUID                Xgfxxk-caKK-3PtU-m8Hp-1WVU-N5na-NjytY6<br>  LV Write Access        read/write<br>  LV Creation host, time localhost.localdomain, 2019-03-28 02:19:24 +0800<br>  LV Status              available<br>  #open                 2<br>  LV Size                2.00 GiB<br>  Current LE             512<br>  Segments               1<br>  Allocation             inherit<br>  Read ahead sectors     auto<br>  -currently set to     8192<br>  Block device           253:1</p>
<p> — Logical volume —<br> LV Path                /dev/centos/root<br> LV<br>Name                root<br>VG Name                centos<br>LV UUID    P4AJcd-iOZf-sywl-Acrq-Ge7a-QrTx-3GYgkz<br>LV Write Access        read/write<br>LV Creation host, time localhost.localdomain, 2019-03-2802:19:25 +0800<br>LV Status              available   # open<br>1   LV Size                &lt;17.00 GiB   Current LE             4351<br>Segments               1<br>Allocation             inherit<br>Read ahead sectors     auto<br>   -currently set to     8192<br>Block device           253:0</p>
</blockquote>
<p>注意此处的路径（标红的）</p>
<blockquote>
<p><code>[root@aubin ~]# lvextend /dev/centos/root /dev/sd3</code><br>  WARNING: Device for PV dRKew5-i08K-vSGQ-okUo-Qx9M-DY2e-CBGUN6 not found or rejected by a filter.<br>  Couldn’t find device with uuid dRKew5-i08K-vSGQ-okUo-Qx9M-DY2e-CBGUN6.<br>  Cannot change VG centos while PVs are missing.<br>  Consider vgreduce –removemissing.<br>  Cannot process volume group centos</p>
</blockquote>
<blockquote>
<p><code>[root@aubin ~]# vgreduce --removemissing vgname</code><br>  Volume group “vgname” not found<br>  Cannot process volume group vgnam</p>
</blockquote>
<blockquote>
<p><code>[root@aubin ~]# vgreduce --removemissing centos</code><br>  WARNING: Device for PV dRKew5-i08K-vSGQ-okUo-Qx9M-DY2e-CBGUN6 not found or rejected by a filter.<br>  Couldn’t find device with uuid dRKew5-i08K-vSGQ-okUo-Qx9M-DY2e-CBGUN6.<br>  Wrote out consistent volume group centos.</p>
</blockquote>
<blockquote>
<p><code>[root@aubin ~]# vgdisplay</code><br>  — Volume group —<br>  VG Name               centos<br>  System ID<br>  Format                lvm2<br>  Metadata Areas        2<br>  Metadata Sequence No  6<br>  VG Access             read/write<br>  VG Status             resizable<br>  MAX LV                0<br>  Cur LV                2<br>  Open LV               2<br>  Max PV                0<br>  Cur PV                2<br>  Act PV                2<br>  VG Size               38.99 GiB<br>  PE Size               4.00 MiB<br>  Total PE              9982<br>  Alloc PE / Size       4863 / &lt;19.00 GiB<br>  Free  PE / Size       5119 / &lt;20.00 GiB<br>  VG UUID               jasglx-OPLA-G0g2-qpgP-wmS3-nISE-JylLNv</p>
</blockquote>
<blockquote>
<p><code>[root@aubin ~]# df -h</code><br>Filesystem               Size  Used Avail Use% Mounted on<br>/dev/mapper/centos-root   17G   17G  553M  97% /<br>devtmpfs                 894M     0  894M   0% /dev<br>tmpfs                    910M     0  910M   0% /dev/shm<br>tmpfs                    910M   11M  900M   2% /run<br>tmpfs                    910M     0  910M   0% /sys/fs/cgroup<br>/dev/sda1               1014M  236M  779M  24% /boot<br>tmpfs                    182M  4.0K  182M   1% /run/user/42<br>tmpfs                    182M   20K  182M   1% /run/user/0</p>
</blockquote>
<blockquote>
<p><code>[root@aubin ~]# xfs_growfs /dev/centos/root</code><br>meta-data=/dev/mapper/centos-root isize=512    agcount=4,<br>agsize=1113856 blks<br>         =                       sectsz=512   attr=2, projid32bit=1<br>         =                       crc=1        finobt=0 spinodes=0 data     =                       bsize=4096   blocks=4455424, imaxpct=25<br>         =                       sunit=0      swidth=0 blks naming   =version 2              bsize=4096   ascii-ci=0 ftype=1 log      =internal               bsize=4096   blocks=2560, version=2<br>         =                       sectsz=512   sunit=0 blks, lazy-count=1 realtime =none                   extsz=4096   blocks=0,<br>rtextents=0</p>
</blockquote>
<blockquote>
<p><code>[root@aubin ~]# df -h</code><br>Filesystem               Size  Used Avail Use%<br>Mounted on /dev/mapper/centos-root   17G   17G  553M  97% / devtmpfs<br>894M     0  894M   0% /dev tmpfs                    910M     0  910M<br>0% /dev/shm tmpfs                    910M   11M  900M   2% /run tmpfs<br>910M     0  910M   0% /sys/fs/cgroup /dev/sda1               1014M<br>236M  779M  24% /boot tmpfs                    182M  4.0K  182M   1%<br>/run/user/42 tmpfs                    182M   20K  182M   1%<br>/run/user/0</p>
</blockquote>
<blockquote>
<p><code>[root@aubin ~]# lvextend /dev/centos/root /dev/sd3</code><br>  Physical Volume<br>“/dev/sd3” not found in Volume Group “centos”.</p>
</blockquote>
<blockquote>
<p><code>[root@aubin ~]# lvextend /dev/centos/root /dev/sda3</code><br>Size of logical   volume centos/root changed from &lt;17.00 GiB (4351 extents) to 36.99 GiB (9470 extents).   Logical volume centos/root successfully resized.</p>
</blockquote>
<blockquote>
<p><code>[root@aubin ~]# xfs_growfs /dev/centos/root</code><br>meta-data=/dev/mapper/centos-root isize=512    agcount=4,<br>agsize=1113856 blks<br>         =                       sectsz=512   attr=2, projid32bit=1<br>         =                       crc=1        finobt=0 spinodes=0 data     =                       bsize=4096   blocks=4455424, imaxpct=25<br>         =                       sunit=0      swidth=0 blks naming   =version 2              bsize=4096   ascii-ci=0 ftype=1 log      =internal               bsize=4096   blocks=2560, version=2<br>         =                       sectsz=512   sunit=0 blks, lazy-count=1 realtime =none                   extsz=4096   blocks=0,<br>rtextents=0 data blocks changed from 4455424 to 9697280</p>
</blockquote>
<blockquote>
<p><code>[root@aubin ~]# df -h</code><br>Filesystem               Size  Used Avail Use%<br>Mounted on /dev/mapper/centos-root   37G   17G   21G  45% / devtmpfs<br>894M     0  894M   0% /dev tmpfs                    910M     0  910M<br>0% /dev/shm tmpfs                    910M   11M  900M   2% /run tmpfs<br>910M     0  910M   0% /sys/fs/cgroup /dev/sda1               1014M<br>236M  779M  24% /boot tmpfs                    182M  4.0K  182M   1%<br>/run/user/42 tmpfs                    182M   20K  182M   1%<br>/run/user/0</p>
</blockquote>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Centos7</tag>
        <tag>虚拟机</tag>
        <tag>磁盘扩充</tag>
      </tags>
  </entry>
  <entry>
    <title>安装双系统之后Win10时间错误</title>
    <url>/2020/03/25/Linux/DoubleSystemTimeWong/</url>
    <content><![CDATA[<h3 id="（一）第一种方法"><a href="#（一）第一种方法" class="headerlink" title="（一）第一种方法"></a>（一）第一种方法</h3><p>注：</p>
<p>​        经测试，第一种方法，本人的电脑不适用，但是有的电脑适用。</p>
<h4 id="Step-1"><a href="#Step-1" class="headerlink" title="Step 1:"></a>Step 1:</h4><p>注意一定要用管理员身份运行</p>
<p>​            <img src="https://img-blog.csdnimg.cn/20200321174213609.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYXh1MTIz,size_16,color_FFFFFF,t_70" alt="\[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-xFJby8gg-1584782970605)(C:\Users\lenovo\Desktop\1584781935581.png)\]"></p>
<h4 id="Step-2"><a href="#Step-2" class="headerlink" title="Step 2:"></a>Step 2:</h4><p><img src="https://img-blog.csdnimg.cn/20200321174308790.png" alt="在这里插入图片描述"></p>
<p>文本</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Reg add HKLM\SYSTEM\CurrentControlSet\Control\TimeZoneInformation /v RealTimeIsUniversal /t REG_DWORD /d 1</span><br></pre></td></tr></table></figure>

<p>之后，重启计算机就，笔者的电脑这个方法是不适用的。</p>
<h3 id="二-第二种方法"><a href="#二-第二种方法" class="headerlink" title="(二)第二种方法"></a>(二)第二种方法</h3><h4 id="Step-1-1"><a href="#Step-1-1" class="headerlink" title="Step 1:"></a>Step 1:</h4><p>​        先进入Ubuntu系统</p>
<p>​       在命令行输入</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install ntpdate</span><br><span class="line">sudo ntpdate time.windows.com</span><br><span class="line">sudo hwclock --localtime --systohc</span><br></pre></td></tr></table></figure>

<p>之后重启电脑，进入Windows，查看是否有效。</p>
<h4 id="Step-2-1"><a href="#Step-2-1" class="headerlink" title="Step 2:"></a>Step 2:</h4><p>​        如果没有效果，并且你已经尝试了第一种，方法，那么请把刚刚添加的注册表删除。方法如下：</p>
<ol>
<li>win + R  输入regedit</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20200321174449998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NoYXh1MTIz,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<ol start="2">
<li>进入此目录下</li>
</ol>
<p><code>\HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Control\TimeZoneInformation</code></p>
<p>​    把<code>RealTimeIsUniversal</code> 删除(在方法一中就是通过命令行添加了叫这个名字的东西)</p>
<ol start="3">
<li>重启计算机。</li>
</ol>
]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>Centos7</tag>
        <tag>双系统</tag>
        <tag>时间错误</tag>
      </tags>
  </entry>
</search>
